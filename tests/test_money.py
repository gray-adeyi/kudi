from unittest import TestCase
from kudi import Money
from kudi.currency_codes import CurrencyCode


class MoneyTestCase(TestCase):
    def test_can_create_money_obj(self):
        m = Money(1, "EUR")
        self.assertEqual(m.amount, 1, f"Expected {1} got {m.amount}")
        self.assertEqual(
            m.currency.code, CurrencyCode.EUR, f"Expected EUR got {m.currency.code}"
        )
        m = Money(-100, "eur")
        self.assertEqual(m.amount, -100)
        self.assertEqual(m.currency.code, CurrencyCode.EUR)

    def test_money_raises_error_on_wrong_currency(self): ...

    def test_money_can_detect_same_currency(self): ...

    def test_can_evaluate_money_equality(self): ...

    def test_money_equality_on_different_currencies_raises_error(self): ...

    def test_can_evaluate_money_greater_than(self): ...

    def test_can_evaluate_money_greater_than_or_equal(self): ...

    def test_can_evaluate_money_less_than(self): ...

    def test_can_evaluate_money_less_than_or_equal(self): ...

    def test_money_is_zero(self): ...

    def test_money_is_negative(self): ...

    def test_money_is_positive(self): ...

    def test_money_absolute(self): ...

    def test_money_negative(self): ...

    def test_can_add_money(self): ...

    def test_can_subtract_money(self): ...

    def test_can_multiply_money(self): ...

    def test_can_round_money(self): ...

    def test_can_split_money(self): ...

    def test_can_allocate_money(self): ...

    def test_money_str_representation(self): ...

    def test_money_representation(self): ...

    def test_money_as_major_unit(self): ...
